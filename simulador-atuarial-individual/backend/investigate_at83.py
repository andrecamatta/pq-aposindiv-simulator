#!/usr/bin/env python3
"""
Script para investigar a t√°bua AT-83 e verificar diferen√ßas entre g√™neros
"""

import sys
import os
sys.path.append('src')

import numpy as np
from sqlmodel import Session, select
from database import engine
from models.database import MortalityTable
from core.mortality_tables import get_mortality_table

def investigate_at83_tables():
    """Investiga as t√°buas AT-83 no banco de dados"""
    print("üîç Investigando t√°buas AT-83 no banco de dados...\n")
    
    with Session(engine) as session:
        # Buscar todas as t√°buas relacionadas √† AT-83
        stmt = select(MortalityTable).where(
            MortalityTable.code.like("%AT%83%"),
            MortalityTable.is_active == True
        )
        tables = session.exec(stmt).all()
        
        if not tables:
            print("‚ùå Nenhuma t√°bua AT-83 encontrada no banco!")
            return
            
        print(f"üìã Encontradas {len(tables)} t√°buas AT-83:")
        for table in tables:
            print(f"   - {table.code}: {table.name}")
            print(f"     G√™nero: {table.gender}")
            print(f"     Fonte: {table.source}")
            if hasattr(table, 'source_id'):
                print(f"     Source ID: {table.source_id}")
            print()
        
        # Verificar se existem vers√µes masculina e feminina
        at83_m = None
        at83_f = None
        
        for table in tables:
            if table.gender == 'M' or table.code.endswith('_M'):
                at83_m = table
            elif table.gender == 'F' or table.code.endswith('_F'):
                at83_f = table
        
        if at83_m and at83_f:
            print("‚úÖ Encontradas vers√µes masculina e feminina da AT-83")
            compare_at83_tables(at83_m, at83_f)
        else:
            print("‚ö†Ô∏è  N√£o foram encontradas vers√µes separadas por g√™nero da AT-83")
            if at83_m:
                print("   Encontrada apenas vers√£o masculina")
            if at83_f:
                print("   Encontrada apenas vers√£o feminina")

def compare_at83_tables(male_table, female_table):
    """Compara as t√°buas AT-83 masculina e feminina"""
    print("\nüìä Comparando t√°buas AT-83 masculina vs feminina:\n")
    
    # Obter dados das t√°buas
    male_data = male_table.get_table_data()
    female_data = female_table.get_table_data()
    
    print(f"T√°bua Masculina ({male_table.code}):")
    print(f"   - Total de idades: {len(male_data)}")
    print(f"   - Faixa et√°ria: {min(male_data.keys())} - {max(male_data.keys())}")
    
    print(f"\nT√°bua Feminina ({female_table.code}):")
    print(f"   - Total de idades: {len(female_data)}")
    print(f"   - Faixa et√°ria: {min(female_data.keys())} - {max(female_data.keys())}")
    
    # Comparar algumas idades espec√≠ficas
    test_ages = [30, 40, 50, 60, 70, 80]
    print(f"\nüìà Compara√ß√£o de taxas de mortalidade (qx):")
    print(f"{'Idade':>5} {'Masculina':>12} {'Feminina':>12} {'Diferen√ßa':>12} {'% Diff':>8}")
    print("-" * 55)
    
    identical_count = 0
    different_count = 0
    
    for age in test_ages:
        if age in male_data and age in female_data:
            male_qx = male_data[age]
            female_qx = female_data[age]
            diff = male_qx - female_qx
            pct_diff = (diff / female_qx * 100) if female_qx > 0 else 0
            
            print(f"{age:>5} {male_qx:>12.6f} {female_qx:>12.6f} {diff:>12.6f} {pct_diff:>7.2f}%")
            
            if abs(diff) < 1e-10:  # Praticamente id√™nticos
                identical_count += 1
            else:
                different_count += 1
    
    print(f"\nüìä Resumo da compara√ß√£o:")
    print(f"   - Idades id√™nticas: {identical_count}")
    print(f"   - Idades diferentes: {different_count}")
    
    if identical_count > different_count:
        print("‚ö†Ô∏è  As t√°buas parecem ser muito similares ou id√™nticas!")
        print("   Isso pode indicar um problema na configura√ß√£o/carregamento.")
    else:
        print("‚úÖ As t√°buas mostram diferen√ßas esperadas entre g√™neros.")

def check_mortality_table_access():
    """Verifica se conseguimos acessar as t√°buas via API"""
    print("\nüîß Testando acesso via API de mortalidade:\n")
    
    try:
        # Tentar obter t√°buas via API
        male_table = get_mortality_table("AT_83", "M")
        female_table = get_mortality_table("AT_83", "F")
        
        print("‚úÖ Conseguimos carregar ambas as t√°buas via API")
        
        # Comparar algumas idades
        test_ages = [30, 50, 70]
        print(f"\nüìà Compara√ß√£o via API:")
        print(f"{'Idade':>5} {'Masculina':>12} {'Feminina':>12} {'Diferen√ßa':>12}")
        print("-" * 45)
        
        for age in test_ages:
            if age < len(male_table) and age < len(female_table):
                male_qx = male_table[age]
                female_qx = female_table[age]
                diff = male_qx - female_qx
                
                print(f"{age:>5} {male_qx:>12.6f} {female_qx:>12.6f} {diff:>12.6f}")
                
    except Exception as e:
        print(f"‚ùå Erro ao acessar t√°buas via API: {e}")

def check_pymort_info():
    """Verifica informa√ß√µes sobre AT-83 no pymort"""
    print("\nüåê Verificando informa√ß√µes da AT-83 no pymort:\n")
    
    try:
        import pymort
        print("‚úÖ pymort dispon√≠vel")
        
        # Tentar carregar a t√°bua 825 (AT-83 atual)
        xml = pymort.MortXML.from_id(825)
        if xml:
            print(f"üìã T√°bua 825 encontrada:")
            print(f"   - Nome: {getattr(xml, 'ContentClassification', 'N/A')}")
            print(f"   - Tabelas dispon√≠veis: {len(xml.Tables) if hasattr(xml, 'Tables') else 0}")
            
            if hasattr(xml, 'Tables') and len(xml.Tables) > 0:
                table = xml.Tables[0]
                if hasattr(table, 'MetaData') and table.MetaData:
                    metadata = table.MetaData
                    print(f"   - Na√ß√£o: {getattr(metadata, 'Nation', 'N/A')}")
                    print(f"   - Descri√ß√£o: {getattr(metadata, 'TableDescription', 'N/A')}")
        
        # Buscar outras poss√≠veis AT-83
        print(f"\nüîç Buscando outras t√°buas AT-83 no pymort...")
        
        # IDs conhecidos relacionados √† AT-83
        potential_ids = [825, 826, 827, 828, 829]  # Alguns IDs pr√≥ximos
        
        for table_id in potential_ids:
            try:
                xml = pymort.MortXML.from_id(table_id)
                if xml:
                    name = getattr(xml, 'ContentClassification', f'Table {table_id}')
                    if 'AT' in name and '83' in name:
                        print(f"   - ID {table_id}: {name}")
            except:
                continue
                
    except ImportError:
        print("‚ùå pymort n√£o dispon√≠vel")
    except Exception as e:
        print(f"‚ùå Erro ao consultar pymort: {e}")

if __name__ == "__main__":
    print("üîç Investiga√ß√£o da T√°bua AT-83")
    print("=" * 50)
    
    investigate_at83_tables()
    check_mortality_table_access()
    check_pymort_info()
    
    print("\n‚úÖ Investiga√ß√£o conclu√≠da!")