import { test, expect } from '@playwright/test';

/**
 * Teste para verificar converg√™ncia das linhas no gr√°fico CD ap√≥s aplicar sugest√£o
 *
 * Cen√°rio:
 * 1. Configurar plano CD com Renda Vital√≠cia Atuarial
 * 2. Verificar que h√° diferen√ßa entre benef√≠cio atual e desejado
 * 3. Aplicar sugest√£o de contribui√ß√£o
 * 4. Verificar que as linhas convergem (saldos finais pr√≥ximos)
 */

test.describe('CD Graph Line Convergence', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:5173');
    await page.waitForLoadState('networkidle');

    // Aguardar carregamento inicial
    await page.waitForTimeout(2000);
  });

  test('lines should converge after applying contribution suggestion', async ({ page }) => {
    console.log('üéØ Iniciando teste de converg√™ncia do gr√°fico CD');

    // 1. Configurar Plano CD
    console.log('üìã Passo 1: Configurando plano CD');
    await page.click('text=Tipo de Plano');
    await page.click('text=CD - Contribui√ß√£o Definida');
    await page.waitForTimeout(500);

    // 2. Configurar modalidade: Renda Vital√≠cia Atuarial
    console.log('üìã Passo 2: Configurando Renda Vital√≠cia Atuarial');
    await page.click('text=Modalidade de Convers√£o');
    await page.click('text=Renda Vital√≠cia Atuarial');
    await page.waitForTimeout(500);

    // 3. Definir benef√≠cio desejado alto para for√ßar diferen√ßa
    console.log('üìã Passo 3: Configurando benef√≠cio desejado');
    const benefitSlider = page.locator('input[type="range"]').filter({ hasText: 'Benef√≠cio Mensal Desejado' }).first();
    await benefitSlider.fill('10000');
    await page.waitForTimeout(500);

    // 4. Aguardar c√°lculo e verificar se h√° sugest√µes
    console.log('‚è≥ Aguardando c√°lculo e sugest√µes...');
    await page.waitForTimeout(3000);

    // 5. Capturar valores ANTES de aplicar sugest√£o
    console.log('üìä Capturando dados ANTES da sugest√£o');

    // Verificar se h√° sugest√£o dispon√≠vel
    const suggestionCard = page.locator('text=Ajustar Contribui√ß√£o').first();
    const hasSuggestion = await suggestionCard.isVisible().catch(() => false);

    if (!hasSuggestion) {
      console.log('‚ö†Ô∏è Nenhuma sugest√£o dispon√≠vel - teste n√£o aplic√°vel');
      test.skip();
      return;
    }

    // Capturar contribui√ß√£o atual ANTES
    const contributionBefore = await page.locator('text=/Taxa de Contribui√ß√£o/').textContent();
    console.log('üí∞ Contribui√ß√£o ANTES:', contributionBefore);

    // 6. Aplicar sugest√£o
    console.log('‚úÖ Passo 4: Aplicando sugest√£o de contribui√ß√£o');
    const applyButton = page.locator('button:has-text("Aplicar")').first();
    await applyButton.click();
    await page.waitForTimeout(2000); // Aguardar rec√°lculo

    // Capturar contribui√ß√£o atual DEPOIS
    const contributionAfter = await page.locator('text=/Taxa de Contribui√ß√£o/').textContent();
    console.log('üí∞ Contribui√ß√£o DEPOIS:', contributionAfter);

    // 7. Navegar para aba de Resultados para ver o gr√°fico
    console.log('üìä Passo 5: Navegando para aba de Resultados');
    await page.click('text=Resultados');
    await page.waitForTimeout(2000);

    // 8. Verificar que o gr√°fico est√° vis√≠vel
    const chartTitle = page.locator('text=Evolu√ß√£o do Saldo CD');
    await expect(chartTitle).toBeVisible();
    console.log('‚úÖ Gr√°fico CD vis√≠vel');

    // 9. Capturar canvas do gr√°fico (screenshot)
    console.log('üì∏ Capturando screenshot do gr√°fico DEPOIS da sugest√£o');
    const chart = page.locator('canvas').first();
    await chart.screenshot({ path: '/tmp/cd_graph_after_suggestion.png' });
    console.log('‚úÖ Screenshot salvo em /tmp/cd_graph_after_suggestion.png');

    // 10. Verificar m√©tricas atrav√©s do DOM
    console.log('üìä Verificando converg√™ncia atrav√©s das m√©tricas');

    // Tentar capturar informa√ß√µes da legenda do gr√°fico
    const legendItems = await page.locator('[class*="legend"]').allTextContents();
    console.log('üìã Itens da legenda:', legendItems);

    // 11. Verificar que n√£o h√° mais grande diferen√ßa (an√°lise visual requerida)
    console.log('‚úÖ Teste completado - verifica√ß√£o visual do screenshot necess√°ria');
    console.log('   Espera-se que as linhas estejam convergindo ap√≥s aplicar sugest√£o');
  });

  test('capture BEFORE state for comparison', async ({ page }) => {
    console.log('üéØ Capturando estado ANTES da corre√ß√£o');

    // Configurar cen√°rio
    await page.click('text=Tipo de Plano');
    await page.click('text=CD - Contribui√ß√£o Definida');
    await page.waitForTimeout(500);

    await page.click('text=Modalidade de Convers√£o');
    await page.click('text=Renda Vital√≠cia Atuarial');
    await page.waitForTimeout(500);

    // Benef√≠cio alto
    const benefitInput = page.locator('input[type="text"]').filter({ hasText: /\d+/ }).first();
    await benefitInput.click();
    await benefitInput.fill('10000');
    await page.keyboard.press('Enter');
    await page.waitForTimeout(3000);

    // Capturar gr√°fico ANTES
    await page.click('text=Resultados');
    await page.waitForTimeout(2000);

    const chart = page.locator('canvas').first();
    await chart.screenshot({ path: '/tmp/cd_graph_BEFORE_fix.png' });

    console.log('‚úÖ Screenshot ANTES salvo: /tmp/cd_graph_BEFORE_fix.png');
  });
});
